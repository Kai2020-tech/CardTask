package com.example.cardtask.fragmentimport android.app.Activityimport android.content.Intentimport android.media.MediaScannerConnectionimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.fragment.app.Fragmentimport com.bumptech.glide.Glideimport com.example.cardtask.Rimport com.example.cardtask.api.*import com.example.cardtask.fragment.CardFragment.Companion.albumRequestCodeimport com.example.cardtask.fragment.CardFragment.Companion.cameraRequestCodeimport com.example.cardtask.fragment.CardFragment.Companion.cardListimport com.example.cardtask.hideKeyboardimport com.example.cardtask.photoDialogimport com.example.cardtask.showToastimport kotlinx.android.synthetic.main.fragment_ed_task.*import kotlinx.android.synthetic.main.fragment_ed_task.view.*import okhttp3.MediaTypeimport okhttp3.MultipartBodyimport okhttp3.RequestBodyimport retrofit2.Callimport retrofit2.Responseimport java.io.File//var _task: CardResponse.UserData.ShowCard.ShowTask? = nullclass EdTaskFragment() : Fragment() {    private var photoFile: File? = null    private lateinit var rootView: View    var cardId = 0    var cardPosition = 0    lateinit var task: CardResponse.UserData.ShowCard.ShowTask//    val task : CardResponse.UserData.ShowCard.ShowTask//        get() = _task!!    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        arguments?.let {            cardId = it.getInt("cardId")            task = it.getParcelable("task")!!        }    }    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        // Inflate the layout for this fragment        rootView = inflater.inflate(R.layout.fragment_ed_task, container, false)        return rootView    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        var colorSelected = ""// radio button Task選擇顏色        rootView.radio_group2.setOnCheckedChangeListener { group, checkedId ->            when (checkedId) {                R.id.radio_btn_red2 -> colorSelected = "red"                R.id.radio_btn_green2 -> colorSelected = "green"                R.id.radio_btn_yellow2 -> colorSelected = "yellow"                R.id.radio_btn_pink2 -> colorSelected = "pink"                R.id.radio_btn_blue2 -> colorSelected = "blue"            }        }        when (task.tag) {   //載入Task顏色            "red" -> rootView.radio_btn_red2.isChecked = true            "green" -> rootView.radio_btn_green2.isChecked = true            "yellow" -> rootView.radio_btn_yellow2.isChecked = true            "pink" -> rootView.radio_btn_pink2.isChecked = true            "blue" -> rootView.radio_btn_blue2.isChecked = true        }//  拍照        rootView.img_task2.setOnClickListener {            photoFile = photoDialog(activity)        }        rootView.ed_taskTitle2.setText(task.title)  //載入Task Title        rootView.ed_taskDescription2.setText(task.description) //載入Task內容        //載入圖片//        Picasso.get().load("https://dodo.gill.gq/" + task.image).into(rootView.img_task2)        if (!task.image.isNullOrEmpty()) {            Glide.with(this).load("https://storage.googleapis.com/gcs.gill.gq/" + task.image).into(rootView.img_task2)            img_task2.background = null        }//      確認更新,傳api        rootView.btn_taskUpdate2.setOnClickListener {            val taskTitle: String = ed_taskTitle2.text.toString()            val taskDescription = ed_taskDescription2.text.toString()            val imgIsDel: Boolean? = null//            Log.d("uri", fileUri.toString())            val file = File(photoFile?.path ?: "")            var imageBody: MultipartBody.Part? = if (file.exists()) {   //如果file存在才,                val requestFile = RequestBody.create(MediaType.parse("image/jpg"), file)                MultipartBody.Part.createFormData("image", file.name, requestFile)            } else null            Api.retrofitService.updateTask(                userToken = token,                card_id = cardId,                taskId = task.id,                image = imageBody,                del_img = imgIsDel,                taskName = MultipartBody.Part.createFormData("title", taskTitle),                color = MultipartBody.Part.createFormData("tag", colorSelected),                description = MultipartBody.Part.createFormData("description", taskDescription),                method = MultipartBody.Part.createFormData("_method", "PUT")            ).enqueue(object : MyCallback<UpdateTaskResponse>() {                override fun onSuccess(call: Call<UpdateTaskResponse>, response: Response<UpdateTaskResponse>) {                    showToast("Task [$taskTitle] 已更新")                    Log.d("Success!", "Update task OK")                    getCards()                }            })//            Api.retrofitService.updateImage(//                userToken = token,//                image = body//            ).enqueue(object : MyCallback<UpdateTaskResponse>() {//                override fun onSuccess(call: Call<UpdateTaskResponse>, response: Response<UpdateTaskResponse>) {//                    showToast("Task [$taskTitle] 已更新")//                    Log.d("Success!", "Update task OK")//                    getCards()//                }//            })            hideKeyboard(ed_taskTitle2)        }        rootView.tv_taskOfCardId2.text = this.cardId.toString()    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (requestCode == cameraRequestCode && resultCode == Activity.RESULT_OK) {            Glide.with(this).load(photoFile).into(img_task2)            Log.d("uriResultPath", photoFile?.path)            img_task2.background = null//            Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE).also { mediaScanIntent ->////                val uri = FileProvider.getUriForFile(requireContext(), "com.example.cardtask.fileprovider", photoFile!!)////                mediaScanIntent.data = uri////                requireActivity().sendBroadcast(mediaScanIntent)////            }            MediaScannerConnection                .scanFile(                    requireContext(), arrayOf(photoFile!!.path),                    null                ) { path, uri ->                    Log.i(                        "ExternalStorage", "Scanned "                                + path + ":"                    )                    Log.i(                        "ExternalStorage", "-> uri="                                + uri                    )                }        } else if (requestCode == albumRequestCode) {            if (data?.data != null) {                Glide.with(this).load(data?.data).into(img_task2)                img_task2.background = null            }        }    }    private fun getCards() {    //取得所有資料        Api.retrofitService.getCard(token)            .enqueue(object : MyCallback<CardResponse>() {                override fun onSuccess(call: Call<CardResponse>, response: Response<CardResponse>) {                    val res = response.body()                    updateCards(res)                    Log.d("Success!", "getCard OK")                    targetFragment?.onActivityResult(111, Activity.RESULT_OK, null)                    requireFragmentManager().popBackStack()                }            })    }    private fun updateCards(res: CardResponse?) {        cardList.clear()        res?.userData?.showCards?.forEach { card ->            cardList.add(card)        }    }}